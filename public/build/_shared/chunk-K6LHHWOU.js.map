{
  "version": 3,
  "sources": ["../../../app/routes/home/brand.$id.tsx"],
  "sourcesContent": ["import {\r\n  faHandshake,\r\n  faHeart,\r\n  faNetworkWired,\r\n  faRemove,\r\n  faStar,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { LoaderArgs, LoaderFunction, json } from \"@remix-run/node\";\r\nimport { useLoaderData } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport useLocalStorageState from \"use-local-storage-state\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { CampaginCard } from \"~/components/utils/campagincard\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport { getCampaignType } from \"~/utils\";\r\n\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n  const id = props.params.id;\r\n  const branddata = await axios.post(`${BaseUrl}/api/get-brand`, { id: id });\r\n  const cookieHeader = props.request.headers.get(\"Cookie\");\r\n  const cookie = await userPrefs.parse(cookieHeader);\r\n\r\n  const reqdata = await axios.post(`${BaseUrl}/api/get-brand-connection`, {\r\n    brandId: id,\r\n  });\r\n  const reqdata1 = await axios.post(`${BaseUrl}/api/get-brand-com-cam`, {\r\n    brandId: id,\r\n  });\r\n\r\n  return json({\r\n    brand: branddata.data.data,\r\n    user: cookie.user,\r\n    brandConnection: reqdata.data.data,\r\n    brandComCam: reqdata1.data.data,\r\n  });\r\n};\r\n\r\nconst BrandPage = () => {\r\n  const brand = useLoaderData().brand;\r\n\r\n  console.log(brand);\r\n  const user = useLoaderData().user;\r\n  const [isPast, setPast] = useState(false);\r\n  const brandConnection = useLoaderData().brandConnection.influencer_count;\r\n  const brandComCam = useLoaderData().brandComCam.completed_campaign;\r\n  const logo =\r\n    brand.logo == \"\" ||\r\n      brand.logo == undefined ||\r\n      brand.logo == null ||\r\n      brand.logo == \"0\"\r\n      ? \"images/avatar.png\"\r\n      : brand.logo;\r\n  const [fav, setFav] = useState<boolean>(false);\r\n\r\n  const [myfavBrand, setMyfavBrand] = useLocalStorageState<brandData[]>(\r\n    \"favbrand\",\r\n    {\r\n      defaultValue: [],\r\n    }\r\n  );\r\n\r\n  type brandData = {\r\n    id: string;\r\n    logo: string;\r\n    name: string;\r\n    email: string;\r\n    website: string;\r\n  };\r\n\r\n  const setFavBrand = (brand: brandData) => {\r\n    setMyfavBrand([...myfavBrand, brand]);\r\n    setFav(true);\r\n  };\r\n\r\n  const revmoceFavBrand = (brand: brandData) => {\r\n    let savebrand: brandData[] = [];\r\n    for (let i: number = 0; i < myfavBrand.length; i++) {\r\n      if (myfavBrand[i][\"id\"] != brand[\"id\"]) {\r\n        savebrand.push(myfavBrand[i]);\r\n      }\r\n    }\r\n    setMyfavBrand(savebrand);\r\n    setFav(false);\r\n  };\r\n\r\n  const [sum, setSum] = useState({\r\n    rowCount: 0,\r\n    constCount: 3,\r\n    rate: 0,\r\n  });\r\n\r\n  const init = async () => {\r\n    const req = {\r\n      search: {\r\n        type: \"3\",\r\n        brand: brand.id,\r\n      },\r\n    };\r\n    const apireq = await axios({\r\n      method: \"post\",\r\n      url: `${BaseUrl}/api/search-review`,\r\n      data: req,\r\n    });\r\n    let myrate: number = 0;\r\n    for (let i: number = 0; i < apireq.data.data.length; i++) {\r\n      myrate +=\r\n        parseInt(apireq.data.data[i].rating1) +\r\n        parseInt(apireq.data.data[i].rating2) +\r\n        parseInt(apireq.data.data[i].rating3);\r\n    }\r\n    setSum((val) => ({\r\n      rowCount: apireq.data.data.length,\r\n      rate: myrate,\r\n      constCount: 3,\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    let res: boolean = false;\r\n    myfavBrand.map((val: brandData, index: number) => {\r\n      if (val.id == brand.id) res = true;\r\n    });\r\n    if (res) {\r\n      setFav(true);\r\n    } else {\r\n      setFav(false);\r\n    }\r\n    init();\r\n  }, []);\r\n\r\n  const [error, setError] = useState<string | null>(null);\r\n  const messageRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const [connectBox, setConnectBox] = useState<boolean>(false);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`w-full h-screen bg-gray-500 fixed top-0 left-0 bg-opacity-30 grid place-items-center ${connectBox ? \"fixed\" : \"hidden\"\r\n          }`}\r\n        style={{ zIndex: 100 }}\r\n      >\r\n        <div className=\"p-6 bg-white rounded-xl shadow-xl w-96\">\r\n          <div className=\"flex\">\r\n            <div className=\"grow\"></div>\r\n            <div\r\n              onClick={() => {\r\n                setConnectBox(false);\r\n              }}\r\n            >\r\n              <FontAwesomeIcon\r\n                icon={faRemove}\r\n                className=\"font-bold text-2xl text-center text-primary\"\r\n              ></FontAwesomeIcon>\r\n            </div>\r\n          </div>\r\n          <h1 className=\"text-primary text-lg font-bold text-left\">Connect</h1>\r\n          <textarea\r\n            ref={messageRef}\r\n            className=\"p-4 w-full h-40 outline-none border-2 bg-[#EEEEEE] focus:border-gray-300 rounded-md resize-none mt-4\"\r\n            placeholder=\"message\"\r\n          ></textarea>\r\n          {error == \"\" || error == null || error == undefined ? null : (\r\n            <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">\r\n              {error}\r\n            </div>\r\n          )}\r\n          <div className=\"flex\">\r\n            <div className=\"grow\"></div>\r\n            <div\r\n              onClick={async () => {\r\n                if (\r\n                  messageRef.current?.value == null ||\r\n                  messageRef.current?.value == undefined ||\r\n                  messageRef.current?.value == \"\"\r\n                )\r\n                  return setError(\"Message can't be blank\");\r\n\r\n                let req = {\r\n                  campaignDraftId: \"0\",\r\n                  fromUserId: user.id,\r\n                  toUserId: brand.id,\r\n                  comment: messageRef.current?.value,\r\n                };\r\n\r\n                const data = await axios({\r\n                  method: \"post\",\r\n                  url: `${BaseUrl}/api/add-chat`,\r\n                  data: req,\r\n                  headers: {\r\n                    \"Access-Control-Allow-Origin\": \"*\",\r\n                    \"Access-Control-Allow-Headers\": \"*\",\r\n                    \"Access-Control-Allow-Options\": \"*\",\r\n                    \"Access-Control-Allow-Methods\": \"*\",\r\n                    \"X-Content-Type-Options\": \"*\",\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"*\",\r\n                  },\r\n                });\r\n\r\n                if (!data.data.status) return setError(data.data.message);\r\n                return setConnectBox(false);\r\n              }}\r\n            >\r\n              <CusButton\r\n                text=\"send\"\r\n                background=\"bg-primary\"\r\n                textColor={\"text-white\"}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-full mt-4 shadow-xl bg-white rounded-xl\">\r\n        <div className=\"w-full relative\">\r\n          <div className=\"absolute top-5 right-5\">\r\n            <FontAwesomeIcon\r\n              onClick={() => {\r\n                let brandval: brandData = {\r\n                  id: brand.id,\r\n                  logo: logo,\r\n                  name: brand.name,\r\n                  email: brand.email,\r\n                  website: brand.webUrl,\r\n                };\r\n                if (fav) return revmoceFavBrand(brandval);\r\n                return setFavBrand(brandval);\r\n              }}\r\n              icon={faHeart}\r\n              className={`${fav ? \"text-red-500\" : \"text-gray-500\"} h-12 w-12`}\r\n            ></FontAwesomeIcon>\r\n          </div>\r\n          <img\r\n            src=\"/images/products/shoe1.jpg\"\r\n            alt=\"error\"\r\n            className=\"w-full h-60 object-cover rounded-t-xl\"\r\n          />\r\n        </div>\r\n        <div className=\"flex flex-col lg:flex-row\">\r\n          <div className=\"p-8 flex flex-row gap-x-3 lg:flex-col\">\r\n            <div>\r\n              <img\r\n                src={logo}\r\n                alt=\"brand logo\"\r\n                className=\"w-32 h-32 rounded-md\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-primary text-lg font-medium my-2\">\r\n                {brand.name}\r\n              </h1>\r\n              <p className=\"text-primary text-md font-normal\">\r\n                Category: Consumer Electronics\r\n              </p>\r\n              <p className=\"text-primary text-md font-normal\">\r\n                website: {brand.webUrl}\r\n              </p>\r\n              <div\r\n                onClick={() => {\r\n                  setConnectBox(true);\r\n                }}\r\n              >\r\n                <CusButton\r\n                  text=\"Connect\"\r\n                  background=\"bg-secondary\"\r\n                  fontwidth=\"font-bold\"\r\n                ></CusButton>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"h-72 w-[2px] bg-gray-300 hidden lg:block mt-8\"></div>\r\n          <div className=\"p-8\">\r\n            <div className=\"flex gap-x-4 flex-col md:flex-row gap-y-2\">\r\n              <Rating\r\n                rate={\r\n                  isNaN(Math.round(sum.rate / sum.rowCount / sum.constCount))\r\n                    ? \"0\"\r\n                    : Math.round(\r\n                      sum.rate / sum.rowCount / sum.constCount\r\n                    ).toString()\r\n                }\r\n              ></Rating>\r\n              <Completed completed={brandComCam.toString()}></Completed>\r\n              <Connection connection={brandConnection.toString()}></Connection>\r\n            </div>\r\n            <h1 className=\"text-primary text-lg font-medium mt-4 mb-2\">\r\n              Brand info\r\n            </h1>\r\n            <p className=\"text-black text-sm font-normal\">{brand.info}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-full mt-4 shadow-xl bg-white rounded-xl\">\r\n        <div className=\"flex mx-4 gap-4\">\r\n          <div\r\n            onClick={() => {\r\n              setPast(false);\r\n            }}\r\n          >\r\n            <CusButton\r\n              text=\"Available Campaigns\"\r\n              background={`${isPast ? \"bg-gray-100\" : \"bg-[#01FFF4]\"}`}\r\n              fontwidth=\"font-bold\"\r\n              textColor={`${isPast ? \"text-gray-600\" : \"text-black\"}`}\r\n            ></CusButton>\r\n          </div>\r\n          <div\r\n            onClick={() => {\r\n              setPast(true);\r\n            }}\r\n          >\r\n            <CusButton\r\n              text=\"Past associations\"\r\n              background={`${isPast ? \"bg-[#01FFF4]\" : \"bg-gray-100\"}`}\r\n              fontwidth=\"font-bold\"\r\n              textColor={`${isPast ? \"text-black\" : \"text-gray-600\"}`}\r\n            ></CusButton>\r\n          </div>\r\n        </div>\r\n        {isPast ? (\r\n          <PastBrandAssociation\r\n            userId={user.id}\r\n            brandId={brand.id}\r\n          ></PastBrandAssociation>\r\n        ) : (\r\n          <AvailableCampaigns brandId={brand.id}></AvailableCampaigns>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BrandPage;\r\n\r\ninterface RatingProps {\r\n  rate: string;\r\n}\r\n\r\nconst Rating: React.FC<RatingProps> = (props: RatingProps): JSX.Element => {\r\n  return (\r\n    <>\r\n      <div className=\"bg-gray-100 flex rounded-lg gap-x-4\">\r\n        <div className=\"bg-gray-200 p-2 rounded-md grid place-items-center\">\r\n          <FontAwesomeIcon\r\n            className=\"text-black text-3xl\"\r\n            icon={faStar}\r\n          ></FontAwesomeIcon>\r\n        </div>\r\n        <div className=\"p-2\">\r\n          <h1 className=\"text-black text-lg font-bold\">{props.rate}</h1>\r\n          <p className=\"text-black text-sm font-normal\">Rating</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface ConnectionProps {\r\n  connection: string;\r\n}\r\n\r\nconst Connection: React.FC<ConnectionProps> = (\r\n  props: ConnectionProps\r\n): JSX.Element => {\r\n  return (\r\n    <>\r\n      <div className=\"bg-gray-100 flex rounded-lg gap-x-4\">\r\n        <div className=\"bg-gray-200 p-2 rounded-md grid place-items-center\">\r\n          <FontAwesomeIcon\r\n            className=\"text-black text-3xl\"\r\n            icon={faHandshake}\r\n          ></FontAwesomeIcon>\r\n        </div>\r\n        <div className=\"p-2\">\r\n          <h1 className=\"text-black text-lg font-bold\">{props.connection}</h1>\r\n          <p className=\"text-black text-sm font-normal\">Connections</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface CompletedProps {\r\n  completed: string;\r\n}\r\n\r\nconst Completed: React.FC<CompletedProps> = (\r\n  props: CompletedProps\r\n): JSX.Element => {\r\n  return (\r\n    <>\r\n      <div className=\"bg-gray-100 flex rounded-lg gap-x-4\">\r\n        <div className=\"bg-gray-200 p-2 rounded-md grid place-items-center\">\r\n          <FontAwesomeIcon\r\n            className=\"text-black text-3xl\"\r\n            icon={faNetworkWired}\r\n          ></FontAwesomeIcon>\r\n        </div>\r\n        <div className=\"p-2\">\r\n          <h1 className=\"text-black text-lg font-bold\">{props.completed}</h1>\r\n          <p className=\"text-black text-sm font-normal\">Completed Campaigns</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface AvailableCampaignsProps {\r\n  brandId: string;\r\n}\r\n\r\nconst AvailableCampaigns: React.FC<AvailableCampaignsProps> = (\r\n  props: AvailableCampaignsProps\r\n): JSX.Element => {\r\n  const [topChampaing, setTopChampaing] = useState<any[]>([]);\r\n  const [campaignCards, setCampaignCards] = useState<React.ReactNode[]>([]);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const apidata = await axios({\r\n        method: \"post\",\r\n        url: `${BaseUrl}/api/campaign-search`,\r\n        data: { brand: props.brandId },\r\n      });\r\n      setTopChampaing(apidata.data.data);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  useEffect(() => {\r\n    const createCampaignCards = async () => {\r\n      let counter = 0;\r\n      const cards = await Promise.all(\r\n        topChampaing.map(async (val: any, index: number) => {\r\n          if (counter >= 5) return null;\r\n          counter++;\r\n          let platforms: string[] = [];\r\n          for (let i: number = 0; i < val[\"platforms\"].length; i++) {\r\n            platforms.push(val[\"platforms\"][i][\"platformLogoUrl\"]);\r\n          }\r\n          let campaignType = await getCampaignType(val[\"campaignTypeId\"]);\r\n          let image =\r\n            val[\"brand\"].length == 0 ||\r\n              val[\"brand\"] == undefined ||\r\n              val[\"brand\"] == null ||\r\n              val[\"brand\"] == \"\"\r\n              ? \"/images/avatar/user.png\"\r\n              : val[\"brand\"][\"logo\"] == \"0\" ||\r\n                val[\"brand\"][\"logo\"] == undefined ||\r\n                val[\"brand\"][\"logo\"] == null ||\r\n                val[\"brand\"][\"logo\"] == \"\"\r\n                ? \"/images/avatar/user.png\"\r\n                : val[\"brand\"][\"logo\"];\r\n          return (\r\n            <div key={index}>\r\n              <CampaginCard\r\n                id={val.id}\r\n                title={val[\"campaignName\"]}\r\n                weburl={val.brand.webUrl}\r\n                platforms={platforms}\r\n                maxval={val.costPerPost.split(\".\")[0]}\r\n                category={campaignType}\r\n                image={image}\r\n                name={val.brand.name}\r\n                currency={val[\"currency\"][\"code\"]}\r\n                btntext=\"View More & Learn\"\r\n              ></CampaginCard>\r\n            </div>\r\n          );\r\n        })\r\n      );\r\n      setCampaignCards(cards);\r\n    };\r\n    createCampaignCards();\r\n  }, [topChampaing]);\r\n\r\n  return (\r\n    <>\r\n      {campaignCards.length == 0 ? (\r\n        <div className=\"text-center w-full px-4 py-8 text-2xl text-gray-600 font-semibold \">\r\n          This brand haven't created any campaign.\r\n        </div>\r\n      ) : (\r\n        <div className=\"flex flex-wrap gap-6 pb-8 pt-6\">{campaignCards}</div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\ninterface PastBrandAssociationProps {\r\n  brandId: string;\r\n  userId: string;\r\n}\r\nconst PastBrandAssociation: React.FC<PastBrandAssociationProps> = (\r\n  props: PastBrandAssociationProps\r\n): JSX.Element => {\r\n  const [resDarft, setResDarft] = useState<any[]>([]);\r\n\r\n  const init = async () => {\r\n    let req = {\r\n      search: {\r\n        fromUser: props.userId,\r\n        influencer: props.userId,\r\n        brand: props.brandId,\r\n      },\r\n    };\r\n\r\n    const responseData = await axios.post(`${BaseUrl}/api/search-draft`, req);\r\n\r\n    if (responseData.data.status == true) {\r\n      setResDarft(responseData.data.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {resDarft.length == 0 ? (\r\n        <div className=\"text-center w-full px-4 py-8 text-2xl text-gray-600 font-semibold \">\r\n          This brand have no past associations with you.\r\n        </div>\r\n      ) : (\r\n        <div className=\"flex flex-wrap gap-6 pb-8 pt-6\">\r\n          {resDarft.map((val: any, index: number) => {\r\n            let image =\r\n              val[\"brand\"].length == 0 ||\r\n                val[\"brand\"] == undefined ||\r\n                val[\"brand\"] == null ||\r\n                val[\"brand\"] == \"\"\r\n                ? \"/images/avatar/user.png\"\r\n                : val[\"brand\"][\"logo\"] == \"0\" ||\r\n                  val[\"brand\"][\"logo\"] == undefined ||\r\n                  val[\"brand\"][\"logo\"] == null ||\r\n                  val[\"brand\"][\"logo\"] == \"\"\r\n                  ? \"/images/avatar/user.png\"\r\n                  : val[\"brand\"][\"logo\"];\r\n            return (\r\n              <div\r\n                key={index}\r\n                className=\"my-2 p-4 bg-white rounded-lg shadow-lg w-60\"\r\n              >\r\n                <div className=\"flex\">\r\n                  <img\r\n                    src={image}\r\n                    alt=\"influencer pic\"\r\n                    className=\"w-10 h-10 shrink-0 rounded-md\"\r\n                  />\r\n                  <div className=\"ml-2\">\r\n                    <p className=\"text-md font-medium\">{val.brand.name}</p>\r\n                    <p className=\"text-sm font-medium\">{val.brand.email}</p>\r\n                  </div>\r\n                </div>\r\n                <p className=\"mt-2 text-md font-medium\">Description</p>\r\n                <p className=\"text-sm font-medium\">{val.description}</p>\r\n                <p className=\"mt-2 text-md font-medium\">Attachment</p>\r\n                <a\r\n                  target=\"_blank\"\r\n                  className=\"mt-2 text-sm font-normal border-2 border-blue-500 inline-block my-2 py-1 px-4  text-blue-500 hover:text-white hover:bg-blue-500\"\r\n                  href={val.attach01}\r\n                >\r\n                  View Doc\r\n                </a>\r\n                <p className=\"mt-2 text-md font-medium\">Status</p>\r\n                <p\r\n                  className={`mt-2 text-md text-white font-medium text-center rounded-md ${val.status.name == \"ACCEPTED\"\r\n                      ? \"bg-green-500\"\r\n                      : val.status.name == \"PENDING\"\r\n                        ? \"bg-yellow-500\"\r\n                        : \"bg-red-500\"\r\n                    }`}\r\n                >\r\n                  {val.status.name}\r\n                </p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport { Rating, Connection, Completed };\r\n"],
  "mappings": "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",
  "names": ["import_react", "brand"]
}
