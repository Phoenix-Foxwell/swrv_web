{
  "version": 3,
  "sources": ["../../../../../app/routes/home/createcampaign/spbd.tsx"],
  "sourcesContent": ["import {\r\n  faAdd,\r\n  faCheck,\r\n  faCircleXmark,\r\n  faPaperclip,\r\n  faRemove,\r\n  faStar,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { LoaderArgs, json } from \"@remix-run/node\";\r\nimport { useLoaderData, useNavigate } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport CreateCampaignStore from \"~/state/campaign/createcampaign\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Rating } from \"react-simple-star-rating\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport Brand from \"~/routes/admin/home/brand\";\r\n\r\nexport const loader = async ({ request }: LoaderArgs) => {\r\n  const platform = await axios.post(`${BaseUrl}/api/getplatform`);\r\n\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const cookie = await userPrefs.parse(cookieHeader);\r\n  return json({ platform: platform.data.data, userdata: cookie.user });\r\n};\r\n\r\nconst Spbd = () => {\r\n  const [backbox, setBackBox] = useState<boolean>(false);\r\n\r\n  const userdata = useLoaderData();\r\n  const userId: string = userdata.userdata.id;\r\n  const brandId: string = userdata.userdata.brandId;\r\n\r\n  const mediatype = [\"Post\", \"Story\", \"Reel\", \"Video\", \"Audio\"];\r\n\r\n  const data = useLoaderData();\r\n  const navigator = useNavigate();\r\n\r\n  const campaginType = CreateCampaignStore((state) => state.campaignTypeId);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const platform = CreateCampaignStore((state) => state.platform);\r\n  const setPlatform = CreateCampaignStore((state) => state.setPlatform);\r\n\r\n  const media = CreateCampaignStore((state) => state.media);\r\n  const setMedia = CreateCampaignStore((state) => state.setMedia);\r\n\r\n  const CampaignName = useRef<HTMLInputElement | null>(null);\r\n\r\n  const campinfo = useRef<HTMLTextAreaElement | null>(null);\r\n\r\n  const StartDate = useRef<HTMLInputElement | null>(null);\r\n\r\n  const EndDate = useRef<HTMLInputElement | null>(null);\r\n\r\n  //start date\r\n  const [sd, setsd] = useState<string>(\"\");\r\n  // end date\r\n  const [ed, seted] = useState<string>(\"\");\r\n\r\n  // campaign name\r\n  const [cn, setcn] = useState<string>(\"\");\r\n\r\n  const campaignTypeId = CreateCampaignStore((state) => state.campaignTypeId);\r\n  const CostPerPost = useRef<HTMLInputElement | null>(null);\r\n\r\n  //cost per post\r\n  const [cpp, setcpp] = useState<string>(\"\");\r\n  return (\r\n    <>\r\n\r\n      <div className={`h-screen w-full grid place-items-center bg-black bg-opacity-25 fixed top-0 left-0 ${backbox ? \"grid\" : \"hidden\"}`}>\r\n        <div className=\"w-80 bg-white rounded-xl shadow-xl p-4\">\r\n          <h1 className=\"text-center text-xl font-semibold\">Are you sure you want to go back.</h1>\r\n          <div className=\"flex justify-around\">\r\n            <button onClick={() => { navigator(-1) }} className=\"bg-green-500 py-2 px-4 text-xl font-medium rounded-md text-white\">Yes</button>\r\n            <button onClick={() => setBackBox(false)} className=\"bg-red-500 py-2 px-4 text-xl font-medium rounded-md text-white\">NO</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex gap-x-4 flex-col lg:flex-row\">\r\n        <div className=\"bg-white shadow-xl rounded-xl px-8 py-4 mt-4 grow\">\r\n          <h2 className=\"text-black tect-xl font-medium text-left my-4\">\r\n            {campaginType == \"5\" ? \"Single post\" : \"Bidding\"}\r\n          </h2>\r\n          <div className=\"flex gap-4 flex-wrap\">\r\n            {data.platform.map((val: any, i: number) => {\r\n              return (\r\n                <div\r\n                  key={i}\r\n                  className={` p-2 rounded-lg shrink-0 ${platform.includes(val.id)\r\n                    ? \"bg-white shadow-xl \"\r\n                    : \"bg-gray-200\"\r\n                    } `}\r\n                  onClick={() => {\r\n                    setPlatform(val.id);\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={data.platform[i][\"platformLogoUrl\"]}\r\n                    alt=\"error\"\r\n                    className=\"w-10 h-10\"\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"flex gap-4 flex-wrap my-6\">\r\n            {mediatype.map((val: string, i: number) => {\r\n              return (\r\n                <div\r\n                  key={i}\r\n                  className={`shrink-0 cursor-pointer text-primary text-lg text-center font-normal w-28 py-1  rounded-xl ${val == media ? \"bg-white shadow-xl\" : \"bg-gray-100\"\r\n                    }`}\r\n                  onClick={() => {\r\n                    setMedia(val);\r\n                  }}\r\n                >\r\n                  {val}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <h2 className=\"text-primary tect-xl font-medium text-left my-1\">\r\n            Campaign name\r\n          </h2>\r\n          <input\r\n            ref={CampaignName}\r\n            type={\"text\"}\r\n            className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n            onChange={(val) => setcn(val.target.value)}\r\n          />\r\n          <h2 className=\"text-primary tect-xl font-medium text-left my-1\">\r\n            Campaign info\r\n          </h2>\r\n          <textarea\r\n            ref={campinfo}\r\n            className=\"p-4 w-full h-40 outline-none bg-[#EEEEEE] focus:border-gray-300 rounded-md resize-none\"\r\n          ></textarea>\r\n          {campaginType == \"6\" ? (\r\n            <div className=\"flex flex-col lg:flex-row\">\r\n              <div className=\"grow\">\r\n                <h2 className=\"text-primary tect-xl font-medium text-left my-1\">\r\n                  Start date\r\n                </h2>\r\n                <input\r\n                  type={\"date\"}\r\n                  ref={StartDate}\r\n                  className=\"bg-[#EEEEEE] outline-none border-none rounded-lg focus:border-gray-300 w-full p-2\"\r\n                  onChange={(val) => setsd(val.target.value)}\r\n                ></input>\r\n              </div>\r\n              <div className=\"w-8\"></div>\r\n              <div className=\"grow\">\r\n                <h2 className=\"text-primary tect-xl font-medium text-left my-1\">\r\n                  End date\r\n                </h2>\r\n                <input\r\n                  ref={EndDate}\r\n                  type={\"date\"}\r\n                  className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n                  onChange={(val) => seted(val.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          <div>\r\n            <h2 className=\"text-primary tect-xl font-medium text-left my-1\">\r\n              Cost per post\r\n            </h2>\r\n            <input\r\n              ref={CostPerPost}\r\n              type={\"number\"}\r\n              className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n              onChange={(val) => setcpp(val.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {error == \"\" || error == null || error == undefined ? null : (\r\n            <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">\r\n              {error}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <div className=\"lg:w-80 bg-white  shadow-lx rounded-xl p-4 mt-4\">\r\n            <h1 className=\"text-primary text-lg font-medium\">\r\n              Campaign Summary\r\n            </h1>\r\n            <div className=\"flex my-4\">\r\n              <p className=\"text-sm text-primary font-normal\">Campaign name</p>\r\n              <div className=\"grow\"></div>\r\n              <p className=\"text-sm text-primary font-medium\">\r\n                {cn == \"\" ? \"--------\" : cn}\r\n              </p>\r\n            </div>\r\n            <div className=\"flex my-4\">\r\n              <p className=\"text-sm text-primary font-normal\">Cost per post</p>\r\n              <div className=\"grow\"></div>\r\n              <p className=\"text-sm text-primary font-medium\">\r\n                {cpp == \"\" ? \"--------\" : cpp}\r\n              </p>\r\n            </div>\r\n            {campaginType == \"6\" ? (\r\n              <>\r\n                <div className=\"flex my-4\">\r\n                  <p className=\"text-sm text-primary font-normal\">Start date</p>\r\n                  <div className=\"grow\"></div>\r\n                  <p className=\"text-sm text-primary font-medium\">\r\n                    {sd == \"\"\r\n                      ? \"--------\"\r\n                      : new Date(sd).toLocaleDateString(\"en-US\", {\r\n                        weekday: \"short\",\r\n                        year: \"numeric\",\r\n                        month: \"long\",\r\n                        day: \"numeric\",\r\n                      })}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex my-4\">\r\n                  <p className=\"text-sm text-primary font-normal\">End date</p>\r\n                  <div className=\"grow\"></div>\r\n                  <p className=\"text-sm text-primary font-medium\">\r\n                    {ed == \"\"\r\n                      ? \"--------\"\r\n                      : new Date(ed).toLocaleDateString(\"en-US\", {\r\n                        weekday: \"short\",\r\n                        year: \"numeric\",\r\n                        month: \"long\",\r\n                        day: \"numeric\",\r\n                      })}\r\n                  </p>\r\n                </div>\r\n              </>\r\n            ) : null}\r\n            {error == \"\" || error == null || error == undefined ? null : (\r\n              <div className=\"my-4 bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-xl text-red-500 text-md font-normal text-md\">\r\n                {error}\r\n              </div>\r\n            )}\r\n            <div className=\"flex w-full\">\r\n              <div\r\n                onClick={() => {\r\n                  setBackBox(false);\r\n                }}\r\n                className=\"w-full\"\r\n              >\r\n                <CusButton\r\n                  text=\"Back\"\r\n                  textColor={\"text-black\"}\r\n                  background=\"bg-gray-100\"\r\n                  width={\"w-full\"}\r\n                  fontwidth={\"font-bold\"}\r\n                ></CusButton>\r\n              </div>\r\n              <div className=\"w-10\"></div>\r\n              <div\r\n                className=\"w-full\"\r\n                onClick={async () => {\r\n                  if (\r\n                    platform == null ||\r\n                    platform.length == 0 ||\r\n                    platform == undefined\r\n                  ) {\r\n                    setError(\"Select a platform\");\r\n                  } else if (\r\n                    media == null ||\r\n                    media == \"\" ||\r\n                    media == undefined\r\n                  ) {\r\n                    setError(\"Select a media\");\r\n                  } else if (\r\n                    CampaignName.current?.value == null ||\r\n                    CampaignName.current?.value == undefined ||\r\n                    CampaignName.current?.value == \"\"\r\n                  ) {\r\n                    setError(\"Enter campaign name\");\r\n                  } else if (CampaignName.current?.value.length < 4) {\r\n                    setError(\"Campaign should be more then 3 character.\");\r\n                  } else if (\r\n                    campinfo.current?.value == null ||\r\n                    campinfo.current?.value == undefined ||\r\n                    campinfo.current?.value == \"\"\r\n                  ) {\r\n                    setError(\"Add campaign info\");\r\n                  } else if (\r\n                    CostPerPost.current?.value == null ||\r\n                    CostPerPost.current?.value == undefined ||\r\n                    CostPerPost.current?.value == \"\"\r\n                  ) {\r\n                    setError(\"Fill the cost per post\");\r\n                  } else {\r\n                    if (campaginType == \"6\") {\r\n                      const x = new Date(StartDate!.current!.value);\r\n                      const y = new Date(EndDate!.current!.value);\r\n                      const pass_date: boolean = x > y;\r\n                      if (\r\n                        StartDate.current?.value == null ||\r\n                        StartDate.current?.value == undefined ||\r\n                        StartDate.current?.value == \"\"\r\n                      ) {\r\n                        setError(\"Enter planed starting date\");\r\n                      } else if (pass_date) {\r\n                        setError(\"Start date should be less then end date\");\r\n                      } else if (\r\n                        EndDate.current?.value == null ||\r\n                        EndDate.current?.value == undefined ||\r\n                        EndDate.current?.value == \"\"\r\n                      ) {\r\n                        setError(\"Enter planed end date\");\r\n                      } else {\r\n                        const req = {\r\n                          userId: userId,\r\n                          brandUserId: userId,\r\n                          brandId: brandId,\r\n                          cityId: \"0\",\r\n                          currencyId: \"3\",\r\n                          categories: \"0\",\r\n                          minEligibleRating: \"0\",\r\n                          maxEligibleRating: \"0\",\r\n                          minReach: \"0\",\r\n                          maxReach: \"0\",\r\n                          costPerPost: CostPerPost.current?.value,\r\n                          totalBudget: \"0\",\r\n                          dos: \"0\",\r\n                          donts: \"0\",\r\n                          mentions: \"0\",\r\n                          hashtags: \"0\",\r\n                          campaignTypeId: campaignTypeId,\r\n                          campaignName: CampaignName.current?.value,\r\n                          campaignInfo: campinfo.current?.value,\r\n                          platforms: platform.join(),\r\n                          startAt: StartDate.current?.value,\r\n                          endAt: EndDate.current?.value,\r\n                        };\r\n\r\n                        const data = await axios({\r\n                          method: \"post\",\r\n                          url: `${BaseUrl}/api/add-campaign`,\r\n                          data: req,\r\n                          headers: {\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\": \"*\",\r\n                            \"Access-Control-Allow-Options\": \"*\",\r\n                            \"Access-Control-Allow-Methods\": \"*\",\r\n                            \"X-Content-Type-Options\": \"*\",\r\n                            \"Content-Type\": \"application/json\",\r\n                            Accept: \"*\",\r\n                          },\r\n                        });\r\n                        if (data.data.status == false) {\r\n                          setError(data.data.message);\r\n                        } else {\r\n                          const req1 = {\r\n                            brandId: brandId,\r\n                            campaignId: data.data.data.campaign.id,\r\n                            remark: \"init bid\",\r\n                            bidamount: CostPerPost.current?.value,\r\n                          };\r\n\r\n                          const data1 = await axios({\r\n                            method: \"post\",\r\n                            url: `${BaseUrl}/api/add-bid`,\r\n                            data: req1,\r\n                            headers: {\r\n                              \"Access-Control-Allow-Origin\": \"*\",\r\n                              \"Access-Control-Allow-Headers\": \"*\",\r\n                              \"Access-Control-Allow-Options\": \"*\",\r\n                              \"Access-Control-Allow-Methods\": \"*\",\r\n                              \"X-Content-Type-Options\": \"*\",\r\n                              \"Content-Type\": \"application/json\",\r\n                              Accept: \"*\",\r\n                            },\r\n                          });\r\n\r\n                          if (data1.data.status == false) {\r\n                            setError(data1.data.message);\r\n                          } else {\r\n                            return navigator(\r\n                              `/home/createcampaign/inviteinf/${data.data.data.campaign.id}`\r\n                            );\r\n                          }\r\n                        }\r\n                      }\r\n                    } else {\r\n                      const req = {\r\n                        userId: userId,\r\n                        brandUserId: userId,\r\n                        brandId: brandId,\r\n                        cityId: \"0\",\r\n                        currencyId: \"3\",\r\n                        categories: \"0\",\r\n                        minEligibleRating: \"0\",\r\n                        maxEligibleRating: \"0\",\r\n                        minReach: \"0\",\r\n                        maxReach: \"0\",\r\n                        costPerPost: CostPerPost.current?.value,\r\n                        totalBudget: \"0\",\r\n                        dos: \"0\",\r\n                        donts: \"0\",\r\n                        mentions: \"0\",\r\n                        hashtags: \"0\",\r\n                        campaignTypeId: campaignTypeId,\r\n                        campaignName: CampaignName.current?.value,\r\n                        campaignInfo: campinfo.current?.value,\r\n                        platforms: platform.join(),\r\n                        startAt: new Date().toLocaleDateString(),\r\n                        endAt: new Date().toLocaleDateString(),\r\n                      };\r\n                      const data = await axios({\r\n                        method: \"post\",\r\n                        url: `${BaseUrl}/api/add-campaign`,\r\n                        data: req,\r\n                        headers: {\r\n                          \"Access-Control-Allow-Origin\": \"*\",\r\n                          \"Access-Control-Allow-Headers\": \"*\",\r\n                          \"Access-Control-Allow-Options\": \"*\",\r\n                          \"Access-Control-Allow-Methods\": \"*\",\r\n                          \"X-Content-Type-Options\": \"*\",\r\n                          \"Content-Type\": \"application/json\",\r\n                          Accept: \"*\",\r\n                        },\r\n                      });\r\n                      if (data.data.status == false) {\r\n                        setError(data.data.message);\r\n                      } else {\r\n                        return navigator(\r\n                          `/home/createcampaign/inviteinf/${data.data.data.campaign.id}`\r\n                        );\r\n                      }\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                <CusButton\r\n                  text=\"Create\"\r\n                  textColor={\"text-white\"}\r\n                  background=\"bg-primary\"\r\n                  width={\"w-full\"}\r\n                ></CusButton>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Spbd;\r\n"],
  "mappings": "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",
  "names": ["import_react", "data"]
}
