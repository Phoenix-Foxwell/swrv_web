{
  "version": 3,
  "sources": ["../../../../app/routes/home/inbox.tsx"],
  "sourcesContent": ["import { useEffect, useId, useRef, useState } from \"react\";\r\nimport * as EmailValidator from \"email-validator\";\r\nimport { LoaderArgs, LoaderFunction, json } from \"@remix-run/node\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport { useLoaderData, useNavigate, useTransition } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChessBishop, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport SideBarNavStore, { SideBarTabs } from \"~/state/navigation/sidebar\";\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n  const cookieHeader = props.request.headers.get(\"Cookie\");\r\n  const cookie = await userPrefs.parse(cookieHeader);\r\n  return json({ user: cookie.user });\r\n};\r\n\r\nconst Invite = () => {\r\n  const userdata = useLoaderData();\r\n  const userId: string = userdata.user.id;\r\n\r\n  const [msgIds, setMsgIds] = useState<any[]>([]);\r\n  const [messages, setMessages] = useState<any[]>([]);\r\n\r\n  type UserType = {\r\n    name: string;\r\n    avatar: string;\r\n    userid: string;\r\n    index: string;\r\n  };\r\n  const navigator = useNavigate();\r\n  const sidebar = SideBarNavStore((state) => state.changeTab);\r\n\r\n  const [user, setUser] = useState<UserType>();\r\n  const init = async () => {\r\n    let req = {\r\n      search: { fromToUser: useId },\r\n    };\r\n    const data = await axios.post(`${BaseUrl}/api/search-chat`, req);\r\n    if (data.data.status == true) {\r\n      for (let i: number = 0; i < data.data.data.length; i++) {\r\n        let fromId: string = data.data.data[i].fromUser.id;\r\n        let toId: string = data.data.data[i].toUser.id;\r\n        if (fromId == userId) {\r\n          if (!msgIds.includes(toId)) {\r\n            setMsgIds([...msgIds, toId]);\r\n            setMessages([...messages, data.data.data[i]]);\r\n          }\r\n        }\r\n        if (toId == userId) {\r\n          if (!msgIds.includes(fromId)) {\r\n            setMsgIds([...msgIds, fromId]);\r\n            setMessages([...messages, data.data.data[i]]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    init();\r\n  });\r\n\r\n  //   const avatar =\r\n  //   user!.avatar == undefined ||\r\n  //   user!.avatar == null ||\r\n  //   user!.avatar == \"0\" ||\r\n  //   user!.avatar == \"\"\r\n  //     ? \"/images/avatar/user.png\"\r\n  //     : user!.avatar;\r\n  // const useravatar =\r\n  //   userdata.user.pic == undefined ||\r\n  //   userdata.user.pic == null ||\r\n  //   userdata.user.pic == \"0\" ||\r\n  //   userdata.user.pic == \"\"\r\n  //     ? \"/images/avatar/user.png\"\r\n  //     : userdata.user.pic;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"my-4\">\r\n        {messages.length == 0 ? (\r\n          <div className=\"w-full bg-white rounded-lg shadow-xl  p-2 overflow-y-scroll no-scrollbar py-10 \">\r\n            <h1 className=\"text-center text-2xl\">No Message</h1>\r\n            <p className=\"text-center text-md\">\r\n              Search user and start message.\r\n            </p>\r\n            <div className=\"text-center mt-6\">\r\n              <button\r\n                className=\"text-white bg-primary py-1 px-2 text-xl font-semibold rounded-md\"\r\n                onClick={() => {\r\n                  sidebar(SideBarTabs.FindCampaigns);\r\n                  navigator(\"/home/findcampaign\");\r\n                }}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex gap-4 flex-col xl:flex-row\">\r\n            <div className=\"w-full flex lg:flex-row flex-col gap-4\">\r\n              <div className=\"w-full bg-white rounded-lg shadow-xl lg:w-80 p-2 max-h-screen overflow-y-scroll no-scrollbar min-h-screen\">\r\n                {/* <div className=\"w-full rounded-md bg-gray-200 py-1 px-2 flex items-center\">\r\n                                <FontAwesomeIcon icon={faSearch}></FontAwesomeIcon>\r\n                                <div className=\"w-4\"></div>\r\n                                <input type=\"text\" placeholder=\"Search\" className=\"outline-none border-none w-full bg-transparent\" />\r\n                            </div> */}\r\n                {messages.map((val: any, index: number) => {\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      onClick={() => {\r\n                        setMsgIds((val) => []);\r\n                        setMessages((val) => []);\r\n                        setUser({\r\n                          name:\r\n                            val.fromUser.id == userId\r\n                              ? val.toUser.name.toString().split(\"@\")[0]\r\n                              : val.fromUser.name.toString().split(\"@\")[0],\r\n                          avatar:\r\n                            val.fromUser.id == userId\r\n                              ? val.toUser.pic\r\n                              : val.fromUser.pic,\r\n                          userid:\r\n                            val.fromUser.id == userId\r\n                              ? val.toUser.id\r\n                              : val.fromUser.id,\r\n                          index: index.toString(),\r\n                        });\r\n                      }}\r\n                    >\r\n                      <UserMessage\r\n                        active={user?.index == index.toString() ? true : false}\r\n                        name={\r\n                          val.fromUser.id == userId\r\n                            ? val.toUser.name.toString().split(\"@\")[0]\r\n                            : val.fromUser.name.toString().split(\"@\")[0]\r\n                        }\r\n                        message={`${val.fromUser.id == userId ? \"you: \" : \"\"} ${val.comment\r\n                          }`}\r\n                        url={\r\n                          val.fromUser.id == userId\r\n                            ? val.toUser.pic\r\n                            : val.fromUser.pic\r\n                        }\r\n                      ></UserMessage>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              {user != undefined ? (\r\n                <ChatBox\r\n                  avatar={user.avatar}\r\n                  id={user.userid}\r\n                  userId={userId}\r\n                  name={user.name}\r\n                  useravatar={userdata.user.pic}\r\n                ></ChatBox>\r\n              ) : null}\r\n            </div>\r\n            {user != undefined ? <UserCard id={user.userid}></UserCard> : null}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Invite;\r\n\r\ntype UserMessageProps = {\r\n  url: string;\r\n  name: string;\r\n  message: string;\r\n  active: boolean;\r\n};\r\n\r\nconst UserMessage = (props: UserMessageProps) => {\r\n  const avatar =\r\n    props.url == \"\" ||\r\n      props.url == \"0\" ||\r\n      props.url == null ||\r\n      props.url == undefined\r\n      ? \"/images/avatar/user.png\"\r\n      : props.url;\r\n  return (\r\n    <>\r\n      <div\r\n        className={`flex w-full py-2 my-1 border-b-2 rounded-md ${props.active ? \"bg-gray-200 px-4\" : \"border-slate-200\"\r\n          }`}\r\n      >\r\n        <img\r\n          src={avatar}\r\n          alt=\"user images\"\r\n          className=\"w-10 h-10 object-cover rounded-lg shrink-0\"\r\n        />\r\n        <div className=\"w-2\"></div>\r\n        <div>\r\n          <p className=\"text-md font-medium  leading-none text-slate-800\">\r\n            {props.name}\r\n          </p>\r\n          <p className=\"text-sm font-normal leading-none text-slate-600\">\r\n            {props.message}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\ntype MessageProps = {\r\n  user: boolean;\r\n  message: string;\r\n  time: string;\r\n  avatar: string;\r\n};\r\n\r\nconst Message = (props: MessageProps) => {\r\n  return (\r\n    <>\r\n      <div className=\"w-full flex items-start my-4\">\r\n        <div className={`grow ${props.user ? \"\" : \"hidden\"}`}></div>\r\n        <img\r\n          src={props.avatar}\r\n          alt=\"avatar\"\r\n          className={`w-10 h-10 rounded-md ${props.user ? \"order-3\" : \"\"}`}\r\n        />\r\n        <div className={`w-4 ${props.user ? \"order-2\" : \"\"}`}></div>\r\n        <div className=\"max-w-4/5 bg-gray-200 rounded-md p-2 order-1\">\r\n          <p\r\n            className={`text-xs text-gray-700 font-normal ${props.user ? \"text-right\" : \"text-left\"\r\n              }`}\r\n          >\r\n            {props.time}\r\n          </p>\r\n          <p\r\n            className={`text-md text-gray-900 font-normal text-left ${props.user ? \"text-right\" : \"text-left\"\r\n              }`}\r\n          >\r\n            {props.message}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\ntype UserCardProps = {\r\n  id: string;\r\n};\r\n\r\nconst UserCard = (props: UserCardProps) => {\r\n  const [userdata, setUserdata] = useState<any>(null);\r\n  const init = async () => {\r\n    const userdata = await axios({\r\n      method: \"post\",\r\n      url: `${BaseUrl}/api/getuser`,\r\n      data: { id: props.id },\r\n    });\r\n    if (userdata.data.status == true) {\r\n      setUserdata(userdata.data.data[0]);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    init();\r\n  }, []);\r\n  const navigator = useNavigate();\r\n  return (\r\n    <>\r\n      {userdata == undefined ? (\r\n        <div className=\"bg-white rounded-lg shadow-xl shrink-0 w-40\">\r\n          <h1 className=\"text-center font-semibold text-rose-500 p-4\">\r\n            No user found\r\n          </h1>\r\n        </div>\r\n      ) : (\r\n        <div className=\"bg-white rounded-lg shadow-xl flex w-full xl:w-80 xl:flex-col flex-col sm:flex-row items-start p-4 xl:px-0 xl:pt-0\">\r\n          <div className=\"w-80 h-80 shrink-0 mx-auto\">\r\n            <img\r\n              src={userdata.pic}\r\n              alt=\"error\"\r\n              className=\"w-full h-80 object-cover rounded-lg\"\r\n            />\r\n          </div>\r\n          <div className=\"px-4 mt-6 sm:mt-0 grow w-full\">\r\n            <p className=\"text-left font-semibold text-lg text-slate-800\">\r\n              {userdata.userName.toString().split(\"@\")[0]}\r\n            </p>\r\n            <p className=\"text-left font-semibold text-sm text-slate-600 mt-4\">\r\n              Bio\r\n            </p>\r\n            <p className=\"text-left font-normal text-sm text-slate-600 mt-4\">\r\n              {userdata.bio}\r\n            </p>\r\n\r\n            <button\r\n              onClick={() => {\r\n                navigator(`/home/myuser/${userdata.id}`);\r\n              }}\r\n              className=\" mt-2 w-full py-2 text-center text-primary font-semibold text-lg bg-[#01FFF4] rounded-md\"\r\n            >\r\n              View profile\r\n            </button>\r\n            <div className=\"h-[1px] bg-slate-400 my-4 w-full\"></div>\r\n            {/* <div className=\"flex\">\r\n                                <p className=\"text-left font-semibold text-sm text-slate-600 mt-4\">Attachments</p>\r\n                                <div className=\"grow\"></div>\r\n                                <button className=\" mt-2 py-2 px-4 text-center text-primary font-semibold text-sm bg-[#01FFF4] rounded-md\">View Campaign</button>\r\n                            </div>\r\n                            <div className=\"flex mt-2\">\r\n                                <div className=\"shrink-0\"><img src=\"/images/inf/inf14.png\" alt=\"user images\" className=\"w-10 h-10 object-cover rounded-lg\" /></div>\r\n                                <div className=\"w-4\"></div>\r\n                                <p className=\"text-sm font-normal leading-none text-slate-600\">Want to awaken your body after a hectic work week? Or, enjoy that after-shower glow by sealing in moisture?</p>\r\n                            </div> */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\ntype ChatBoxProps = {\r\n  id: string;\r\n  userId: string;\r\n  avatar: string;\r\n  name: string;\r\n  useravatar: string;\r\n};\r\n\r\nconst ChatBox = (props: ChatBoxProps) => {\r\n  const chatBoxRef = useRef<HTMLDivElement>(null);\r\n  const chatText = useRef<HTMLInputElement>(null);\r\n  const [message, setMessage] = useState<any[]>([]);\r\n  const [changedata, setChangeData] = useState<boolean>(false);\r\n\r\n  const init = async () => {\r\n    setMessage([]);\r\n    let user1 = {\r\n      search: {\r\n        fromUser: props.id,\r\n        toUser: props.userId,\r\n      },\r\n    };\r\n\r\n    let user2 = {\r\n      search: {\r\n        fromUser: props.userId,\r\n        toUser: props.id,\r\n      },\r\n    };\r\n\r\n    const user1data = await axios({\r\n      method: \"post\",\r\n      url: `${BaseUrl}/api/search-chat`,\r\n      data: user1,\r\n    });\r\n\r\n    const user2data = await axios({\r\n      method: \"post\",\r\n      url: `${BaseUrl}/api/search-chat`,\r\n      data: user2,\r\n    });\r\n    setMessage((prevState) => [\r\n      ...prevState,\r\n      ...user1data.data.data,\r\n      ...user2data.data.data,\r\n    ]);\r\n    setMessage((prevState) =>\r\n      prevState.sort(\r\n        (a, b) =>\r\n          new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\r\n      )\r\n    );\r\n\r\n    // if (user1data.data.status == true) {\r\n    //     setMessage([...message, ...user1data.data.data]);\r\n    // }\r\n    // if (user2data.data.status == true) {\r\n    //     setMessage([...message, ...user2data.data.data]);\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    chatBoxRef!.current!.scrollTop = chatBoxRef.current?.scrollHeight!;\r\n    init();\r\n  }, [changedata]);\r\n\r\n  const sendMessage = async (msg: string) => {\r\n    let req = {\r\n      campaignDraftId: \"0\",\r\n      fromUserId: props.userId,\r\n      toUserId: props.id,\r\n      comment: msg,\r\n    };\r\n\r\n    const data = await axios({\r\n      method: \"post\",\r\n      url: `${BaseUrl}/api/add-chat`,\r\n      data: req,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Headers\": \"*\",\r\n        \"Access-Control-Allow-Options\": \"*\",\r\n        \"Access-Control-Allow-Methods\": \"*\",\r\n        \"X-Content-Type-Options\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"*\",\r\n      },\r\n    });\r\n    setChangeData(!changedata);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"bg-white rounded-lg shadow-xl w-full p-4 max-h-screen flex flex-col\">\r\n        <div className=\"flex items-center\">\r\n          <img\r\n            src={props.avatar}\r\n            className=\"w-10 h-10 rounded-md\"\r\n            alt=\"avatar\"\r\n          />\r\n          <div className=\"w-4\"></div>\r\n          <p className=\"text-md font-semibold text-slate-900 \">{props.name}</p>\r\n        </div>\r\n        <div className=\"w-full h-[2px] my-2 bg-slate-300\"></div>\r\n        <div\r\n          ref={chatBoxRef}\r\n          className=\"w-full h-full overflow-y-scroll grow no-scrollbar\"\r\n        >\r\n          {message.reverse().map((val: any, index: number) => {\r\n            return (\r\n              <div key={index}>\r\n                <Message\r\n                  avatar={\r\n                    val.fromUser.id == props.userId\r\n                      ? props.useravatar\r\n                      : props.avatar\r\n                  }\r\n                  message={val.comment}\r\n                  time={val.updatedAt}\r\n                  user={val.fromUser.id == props.userId}\r\n                ></Message>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"w-full px-4 py-2\">\r\n          <div className=\" bg-gray-200 rounded-md px-2 py-2 flex\">\r\n            <input\r\n              ref={chatText}\r\n              type=\"text\"\r\n              className=\"py-1 w-full px-2 bg-transparent outline-none\"\r\n              placeholder=\"type something\"\r\n            />\r\n            <div className=\"w-4\"></div>\r\n            <button\r\n              className=\"bg-primary rounded-md text-white  text-md py-1 px-4 font-semibold\"\r\n              onClick={async () => {\r\n                if (\r\n                  chatText.current?.value == null ||\r\n                  chatText.current?.value == undefined ||\r\n                  chatText.current?.value == \"\"\r\n                ) {\r\n                } else {\r\n                  await sendMessage(chatText.current?.value);\r\n                  chatText!.current!.value = \"\";\r\n                }\r\n              }}\r\n            >\r\n              SEND\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,mBAAmD;AA8E/C;AA9DJ,IAAM,SAAS,MAAM;AACnB,QAAM,WAAW,cAAc;AAC/B,QAAM,SAAiB,SAAS,KAAK;AAErC,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAAgB,CAAC,CAAC;AAC9C,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAgB,CAAC,CAAC;AAQlD,QAAM,YAAY,YAAY;AAC9B,QAAM,UAAU,gBAAgB,CAAC,UAAU,MAAM,SAAS;AAE1D,QAAM,CAAC,MAAM,OAAO,QAAI,uBAAmB;AAC3C,QAAM,OAAO,YAAY;AACvB,QAAI,MAAM;AAAA,MACR,QAAQ,EAAE,YAAY,mBAAM;AAAA,IAC9B;AACA,UAAM,OAAO,MAAM,cAAM,KAAK,GAAG,2BAA2B,GAAG;AAC/D,QAAI,KAAK,KAAK,UAAU,MAAM;AAC5B,eAAS,IAAY,GAAG,IAAI,KAAK,KAAK,KAAK,QAAQ,KAAK;AACtD,YAAI,SAAiB,KAAK,KAAK,KAAK,GAAG,SAAS;AAChD,YAAI,OAAe,KAAK,KAAK,KAAK,GAAG,OAAO;AAC5C,YAAI,UAAU,QAAQ;AACpB,cAAI,CAAC,OAAO,SAAS,IAAI,GAAG;AAC1B,sBAAU,CAAC,GAAG,QAAQ,IAAI,CAAC;AAC3B,wBAAY,CAAC,GAAG,UAAU,KAAK,KAAK,KAAK,EAAE,CAAC;AAAA,UAC9C;AAAA,QACF;AACA,YAAI,QAAQ,QAAQ;AAClB,cAAI,CAAC,OAAO,SAAS,MAAM,GAAG;AAC5B,sBAAU,CAAC,GAAG,QAAQ,MAAM,CAAC;AAC7B,wBAAY,CAAC,GAAG,UAAU,KAAK,KAAK,KAAK,EAAE,CAAC;AAAA,UAC9C;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,8BAAU,MAAM;AACd,SAAK;AAAA,EACP,CAAC;AAiBD,SACE,sFACE,6DAAC,SAAI,WAAU,QACZ,mBAAS,UAAU,IAClB,mDAAC,SAAI,WAAU,mFACb;AAAA,uDAAC,QAAG,WAAU,wBAAuB,0BAArC;AAAA;AAAA;AAAA;AAAA,WAA+C;AAAA,IAC/C,mDAAC,OAAE,WAAU,uBAAsB,8CAAnC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,SAAI,WAAU,oBACb;AAAA,MAAC;AAAA;AAAA,QACC,WAAU;AAAA,QACV,SAAS,MAAM;AACb,uCAAiC;AACjC,oBAAU,oBAAoB;AAAA,QAChC;AAAA,QACD;AAAA;AAAA,MAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,KATF;AAAA;AAAA;AAAA;AAAA,WAUA;AAAA,OAfF;AAAA;AAAA;AAAA;AAAA,SAgBA,IAEA,mDAAC,SAAI,WAAU,mCACb;AAAA,uDAAC,SAAI,WAAU,0CACb;AAAA,yDAAC,SAAI,WAAU,6GAMZ,mBAAS,IAAI,CAAC,KAAU,UAAkB;AACzC,eACE;AAAA,UAAC;AAAA;AAAA,YAEC,SAAS,MAAM;AACb,wBAAU,CAACA,SAAQ,CAAC,CAAC;AACrB,0BAAY,CAACA,SAAQ,CAAC,CAAC;AACvB,sBAAQ;AAAA,gBACN,MACE,IAAI,SAAS,MAAM,SACf,IAAI,OAAO,KAAK,SAAS,EAAE,MAAM,GAAG,EAAE,KACtC,IAAI,SAAS,KAAK,SAAS,EAAE,MAAM,GAAG,EAAE;AAAA,gBAC9C,QACE,IAAI,SAAS,MAAM,SACf,IAAI,OAAO,MACX,IAAI,SAAS;AAAA,gBACnB,QACE,IAAI,SAAS,MAAM,SACf,IAAI,OAAO,KACX,IAAI,SAAS;AAAA,gBACnB,OAAO,MAAM,SAAS;AAAA,cACxB,CAAC;AAAA,YACH;AAAA,YAEA;AAAA,cAAC;AAAA;AAAA,gBACC,SAAQ,6BAAM,UAAS,MAAM,SAAS,IAAI,OAAO;AAAA,gBACjD,MACE,IAAI,SAAS,MAAM,SACf,IAAI,OAAO,KAAK,SAAS,EAAE,MAAM,GAAG,EAAE,KACtC,IAAI,SAAS,KAAK,SAAS,EAAE,MAAM,GAAG,EAAE;AAAA,gBAE9C,SAAS,GAAG,IAAI,SAAS,MAAM,SAAS,UAAU,MAAM,IAAI;AAAA,gBAE5D,KACE,IAAI,SAAS,MAAM,SACf,IAAI,OAAO,MACX,IAAI,SAAS;AAAA;AAAA,cAZrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAcC;AAAA;AAAA,UAnCI;AAAA,UADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAqCA;AAAA,MAEJ,CAAC,KA/CH;AAAA;AAAA;AAAA;AAAA,aAgDA;AAAA,MACC,QAAQ,SACP;AAAA,QAAC;AAAA;AAAA,UACC,QAAQ,KAAK;AAAA,UACb,IAAI,KAAK;AAAA,UACT;AAAA,UACA,MAAM,KAAK;AAAA,UACX,YAAY,SAAS,KAAK;AAAA;AAAA,QAL5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMC,IACC;AAAA,SA1DN;AAAA;AAAA;AAAA;AAAA,WA2DA;AAAA,IACC,QAAQ,SAAY,mDAAC,YAAS,IAAI,KAAK,UAAnB;AAAA;AAAA;AAAA;AAAA,WAA2B,IAAc;AAAA,OA7DhE;AAAA;AAAA;AAAA;AAAA,SA8DA,KAlFJ;AAAA;AAAA;AAAA;AAAA,SAoFA,KArFF;AAAA;AAAA;AAAA;AAAA,SAsFA;AAEJ;AAEA,IAAO,gBAAQ;AASf,IAAM,cAAc,CAAC,UAA4B;AAC/C,QAAM,SACJ,MAAM,OAAO,MACX,MAAM,OAAO,OACb,MAAM,OAAO,QACb,MAAM,OAAO,SACX,4BACA,MAAM;AACZ,SACE,sFACE;AAAA,IAAC;AAAA;AAAA,MACC,WAAW,+CAA+C,MAAM,SAAS,qBAAqB;AAAA,MAG9F;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,KAAK;AAAA,YACL,KAAI;AAAA,YACJ,WAAU;AAAA;AAAA,UAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIA;AAAA,QACA,mDAAC,SAAI,WAAU,SAAf;AAAA;AAAA;AAAA;AAAA,eAAqB;AAAA,QACrB,mDAAC,SACC;AAAA,6DAAC,OAAE,WAAU,oDACV,gBAAM,QADT;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,mDAAC,OAAE,WAAU,mDACV,gBAAM,WADT;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA;AAAA;AAAA,IAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,KAnBF;AAAA;AAAA;AAAA;AAAA,SAoBA;AAEJ;AASA,IAAM,UAAU,CAAC,UAAwB;AACvC,SACE,sFACE,6DAAC,SAAI,WAAU,gCACb;AAAA,uDAAC,SAAI,WAAW,QAAQ,MAAM,OAAO,KAAK,cAA1C;AAAA;AAAA;AAAA;AAAA,WAAsD;AAAA,IACtD;AAAA,MAAC;AAAA;AAAA,QACC,KAAK,MAAM;AAAA,QACX,KAAI;AAAA,QACJ,WAAW,wBAAwB,MAAM,OAAO,YAAY;AAAA;AAAA,MAH9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAIA;AAAA,IACA,mDAAC,SAAI,WAAW,OAAO,MAAM,OAAO,YAAY,QAAhD;AAAA;AAAA;AAAA;AAAA,WAAsD;AAAA,IACtD,mDAAC,SAAI,WAAU,gDACb;AAAA;AAAA,QAAC;AAAA;AAAA,UACC,WAAW,qCAAqC,MAAM,OAAO,eAAe;AAAA,UAG3E,gBAAM;AAAA;AAAA,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,MACA;AAAA,QAAC;AAAA;AAAA,UACC,WAAW,+CAA+C,MAAM,OAAO,eAAe;AAAA,UAGrF,gBAAM;AAAA;AAAA,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,SAZF;AAAA;AAAA;AAAA;AAAA,WAaA;AAAA,OArBF;AAAA;AAAA;AAAA;AAAA,SAsBA,KAvBF;AAAA;AAAA;AAAA;AAAA,SAwBA;AAEJ;AAMA,IAAM,WAAW,CAAC,UAAyB;AACzC,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAc,IAAI;AAClD,QAAM,OAAO,YAAY;AACvB,UAAMC,YAAW,MAAM,cAAM;AAAA,MAC3B,QAAQ;AAAA,MACR,KAAK,GAAG;AAAA,MACR,MAAM,EAAE,IAAI,MAAM,GAAG;AAAA,IACvB,CAAC;AACD,QAAIA,UAAS,KAAK,UAAU,MAAM;AAChC,kBAAYA,UAAS,KAAK,KAAK,EAAE;AAAA,IACnC;AAAA,EACF;AACA,8BAAU,MAAM;AACd,SAAK;AAAA,EACP,GAAG,CAAC,CAAC;AACL,QAAM,YAAY,YAAY;AAC9B,SACE,sFACG,sBAAY,SACX,mDAAC,SAAI,WAAU,+CACb,6DAAC,QAAG,WAAU,+CAA8C,6BAA5D;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA,IAEA,mDAAC,SAAI,WAAU,sHACb;AAAA,uDAAC,SAAI,WAAU,8BACb;AAAA,MAAC;AAAA;AAAA,QACC,KAAK,SAAS;AAAA,QACd,KAAI;AAAA,QACJ,WAAU;AAAA;AAAA,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAIA,KALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,IACA,mDAAC,SAAI,WAAU,iCACb;AAAA,yDAAC,OAAE,WAAU,kDACV,mBAAS,SAAS,SAAS,EAAE,MAAM,GAAG,EAAE,MAD3C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,OAAE,WAAU,uDAAsD,mBAAnE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,OAAE,WAAU,qDACV,mBAAS,OADZ;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MAEA;AAAA,QAAC;AAAA;AAAA,UACC,SAAS,MAAM;AACb,sBAAU,gBAAgB,SAAS,IAAI;AAAA,UACzC;AAAA,UACA,WAAU;AAAA,UACX;AAAA;AAAA,QALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,MACA,mDAAC,SAAI,WAAU,sCAAf;AAAA;AAAA;AAAA;AAAA,aAAkD;AAAA,SAnBpD;AAAA;AAAA;AAAA;AAAA,WA8BA;AAAA,OAtCF;AAAA;AAAA;AAAA;AAAA,SAuCA,KA/CJ;AAAA;AAAA;AAAA;AAAA,SAiDA;AAEJ;AAUA,IAAM,UAAU,CAAC,UAAwB;AACvC,QAAM,iBAAa,qBAAuB,IAAI;AAC9C,QAAM,eAAW,qBAAyB,IAAI;AAC9C,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAgB,CAAC,CAAC;AAChD,QAAM,CAAC,YAAY,aAAa,QAAI,uBAAkB,KAAK;AAE3D,QAAM,OAAO,YAAY;AACvB,eAAW,CAAC,CAAC;AACb,QAAI,QAAQ;AAAA,MACV,QAAQ;AAAA,QACN,UAAU,MAAM;AAAA,QAChB,QAAQ,MAAM;AAAA,MAChB;AAAA,IACF;AAEA,QAAI,QAAQ;AAAA,MACV,QAAQ;AAAA,QACN,UAAU,MAAM;AAAA,QAChB,QAAQ,MAAM;AAAA,MAChB;AAAA,IACF;AAEA,UAAM,YAAY,MAAM,cAAM;AAAA,MAC5B,QAAQ;AAAA,MACR,KAAK,GAAG;AAAA,MACR,MAAM;AAAA,IACR,CAAC;AAED,UAAM,YAAY,MAAM,cAAM;AAAA,MAC5B,QAAQ;AAAA,MACR,KAAK,GAAG;AAAA,MACR,MAAM;AAAA,IACR,CAAC;AACD,eAAW,CAAC,cAAc;AAAA,MACxB,GAAG;AAAA,MACH,GAAG,UAAU,KAAK;AAAA,MAClB,GAAG,UAAU,KAAK;AAAA,IACpB,CAAC;AACD;AAAA,MAAW,CAAC,cACV,UAAU;AAAA,QACR,CAAC,GAAG,MACF,IAAI,KAAK,EAAE,SAAS,EAAE,QAAQ,IAAI,IAAI,KAAK,EAAE,SAAS,EAAE,QAAQ;AAAA,MACpE;AAAA,IACF;AAAA,EAQF;AAEA,8BAAU,MAAM;AA9XlB;AA+XI,eAAY,QAAS,aAAY,gBAAW,YAAX,mBAAoB;AACrD,SAAK;AAAA,EACP,GAAG,CAAC,UAAU,CAAC;AAEf,QAAM,cAAc,OAAO,QAAgB;AACzC,QAAI,MAAM;AAAA,MACR,iBAAiB;AAAA,MACjB,YAAY,MAAM;AAAA,MAClB,UAAU,MAAM;AAAA,MAChB,SAAS;AAAA,IACX;AAEA,UAAM,OAAO,MAAM,cAAM;AAAA,MACvB,QAAQ;AAAA,MACR,KAAK,GAAG;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,QACP,+BAA+B;AAAA,QAC/B,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,QAChC,0BAA0B;AAAA,QAC1B,gBAAgB;AAAA,QAChB,QAAQ;AAAA,MACV;AAAA,IACF,CAAC;AACD,kBAAc,CAAC,UAAU;AAAA,EAC3B;AAEA,SACE,sFACE,6DAAC,SAAI,WAAU,uEACb;AAAA,uDAAC,SAAI,WAAU,qBACb;AAAA;AAAA,QAAC;AAAA;AAAA,UACC,KAAK,MAAM;AAAA,UACX,WAAU;AAAA,UACV,KAAI;AAAA;AAAA,QAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA;AAAA,MACA,mDAAC,SAAI,WAAU,SAAf;AAAA;AAAA;AAAA;AAAA,aAAqB;AAAA,MACrB,mDAAC,OAAE,WAAU,yCAAyC,gBAAM,QAA5D;AAAA;AAAA;AAAA;AAAA,aAAiE;AAAA,SAPnE;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,IACA,mDAAC,SAAI,WAAU,sCAAf;AAAA;AAAA;AAAA;AAAA,WAAkD;AAAA,IAClD;AAAA,MAAC;AAAA;AAAA,QACC,KAAK;AAAA,QACL,WAAU;AAAA,QAET,kBAAQ,QAAQ,EAAE,IAAI,CAAC,KAAU,UAAkB;AAClD,iBACE,mDAAC,SACC;AAAA,YAAC;AAAA;AAAA,cACC,QACE,IAAI,SAAS,MAAM,MAAM,SACrB,MAAM,aACN,MAAM;AAAA,cAEZ,SAAS,IAAI;AAAA,cACb,MAAM,IAAI;AAAA,cACV,MAAM,IAAI,SAAS,MAAM,MAAM;AAAA;AAAA,YARjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASC,KAVO,OAAV;AAAA;AAAA;AAAA;AAAA,iBAWA;AAAA,QAEJ,CAAC;AAAA;AAAA,MAnBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoBA;AAAA,IACA,mDAAC,SAAI,WAAU,oBACb,6DAAC,SAAI,WAAU,0CACb;AAAA;AAAA,QAAC;AAAA;AAAA,UACC,KAAK;AAAA,UACL,MAAK;AAAA,UACL,WAAU;AAAA,UACV,aAAY;AAAA;AAAA,QAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,MACA,mDAAC,SAAI,WAAU,SAAf;AAAA;AAAA;AAAA;AAAA,aAAqB;AAAA,MACrB;AAAA,QAAC;AAAA;AAAA,UACC,WAAU;AAAA,UACV,SAAS,YAAY;AAzcnC;AA0cgB,kBACE,cAAS,YAAT,mBAAkB,UAAS,UAC3B,cAAS,YAAT,mBAAkB,UAAS,YAC3B,cAAS,YAAT,mBAAkB,UAAS,IAC3B;AAAA,YACF,OAAO;AACL,oBAAM,aAAY,cAAS,YAAT,mBAAkB,KAAK;AACzC,uBAAU,QAAS,QAAQ;AAAA,YAC7B;AAAA,UACF;AAAA,UACD;AAAA;AAAA,QAbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeA;AAAA,SAvBF;AAAA;AAAA;AAAA;AAAA,WAwBA,KAzBF;AAAA;AAAA;AAAA;AAAA,WA0BA;AAAA,OA1DF;AAAA;AAAA;AAAA;AAAA,SA2DA,KA5DF;AAAA;AAAA;AAAA;AAAA,SA6DA;AAEJ;",
  "names": ["val", "userdata"]
}
