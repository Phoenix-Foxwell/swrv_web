{
  "version": 3,
  "sources": ["../../../../../app/routes/home/profilecomplete/fifthpage.tsx"],
  "sourcesContent": ["import {\r\n  ActionArgs,\r\n  ActionFunction,\r\n  LoaderArgs,\r\n  LoaderFunction,\r\n  json,\r\n  redirect,\r\n} from \"@remix-run/node\";\r\nimport { Form, Link, useLoaderData, useNavigate } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport UserInputStore from \"~/state/user/firstinput\";\r\nimport * as EmailValidator from \"email-validator\";\r\n\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n  const cookieHeader = props.request.headers.get(\"Cookie\");\r\n  const cookie = await userPrefs.parse(cookieHeader);\r\n\r\n  return json({ user: cookie.user });\r\n};\r\n\r\nconst ThirdPage = () => {\r\n  const userdata = useLoaderData();\r\n  const userId: string = userdata.user.id;\r\n  const brandId: string = userdata.user.brand.id;\r\n\r\n  const [error, setError] = useState<String | null>(null);\r\n  const [sus, setSus] = useState<String | null>(null);\r\n\r\n  const setIndex = UserInputStore((state) => state.setIndex);\r\n\r\n  const nextButton = useRef<HTMLButtonElement>(null);\r\n  const nameRef = useRef<HTMLInputElement>(null);\r\n  const emailRef = useRef<HTMLInputElement>(null);\r\n\r\n  const [contactnumber, setContactnumber] = useState<number>();\r\n  const handelcontent = (e: any) => {\r\n    setContactnumber(e.target.value.replace(/\\D/g, \"\"));\r\n  };\r\n\r\n  type InvitedUser = {\r\n    name: string;\r\n    email: string;\r\n    number: string;\r\n  };\r\n  const [invitedUser, setInvitedUser] = useState<InvitedUser[]>([]);\r\n  const [isSending, setIsSending] = useState<boolean>(false);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-8 w-full\">\r\n        <h1 className=\"text-2xl text-black font-bold\">Invite users</h1>\r\n        <div className=\"flex w-full\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <p className=\"text-black text-left font-normal text-lg  mt-4\">\r\n                Username\r\n              </p>\r\n              <input\r\n                ref={nameRef}\r\n                type={\"text\"}\r\n                className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n              />\r\n              <p className=\"text-black text-left font-normal text-lg  mt-4\">\r\n                Email\r\n              </p>\r\n              <input\r\n                ref={emailRef}\r\n                type={\"text\"}\r\n                className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n              />\r\n              <p className=\"text-black text-left font-normal text-lg  mt-4\">\r\n                contact number\r\n              </p>\r\n              <input\r\n                onChange={handelcontent}\r\n                value={contactnumber}\r\n                type={\"text\"}\r\n                maxLength={10}\r\n                className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n              />\r\n            </div>\r\n            <div className=\"flex my-4\">\r\n              <div className=\"grow\"></div>\r\n\r\n              {isSending ?\r\n                <button\r\n                  className=\"text-white rounded-lg bg-secondary py-1 px-4 font-semibold text-lg\"\r\n                >\r\n                  Sending...\r\n                </button>\r\n                :\r\n                <button\r\n                  onClick={async () => {\r\n                    setIsSending(true);\r\n                    setError(null);\r\n                    if (\r\n                      nameRef.current?.value == null ||\r\n                      nameRef.current?.value == undefined ||\r\n                      nameRef.current?.value == \"\"\r\n                    ) {\r\n                      setError(\"Enter the user \");\r\n                    } else if (\r\n                      emailRef.current?.value == null ||\r\n                      emailRef.current?.value == undefined ||\r\n                      emailRef.current?.value == \"\"\r\n                    ) {\r\n                      setError(\"Fill the Brand info\");\r\n                    } else if (\r\n                      !EmailValidator.validate(emailRef.current?.value)\r\n                    ) {\r\n                      setError(\"Enter valid email\");\r\n                    } else if (\r\n                      contactnumber == null ||\r\n                      contactnumber == undefined ||\r\n                      contactnumber == 0\r\n                    ) {\r\n                      setError(\"Fill the contact number\");\r\n                    } else if (contactnumber.toString().length != 10) {\r\n                      setError(\"Enter a 10 degit valid contact number\");\r\n                    } else {\r\n                      let req = {\r\n                        userId: userId,\r\n                        brandId: brandId,\r\n                        name: nameRef.current?.value,\r\n                        email: emailRef.current?.value,\r\n                        contact: contactnumber,\r\n                      };\r\n\r\n                      const data = await axios({\r\n                        method: \"post\",\r\n                        url: `${BaseUrl}/api/send-brand-invite`,\r\n                        data: req,\r\n                      });\r\n                      if (data.data.status == false) {\r\n                        return setError(data.data.message);\r\n                      } else {\r\n                        let user: InvitedUser = {\r\n                          name: nameRef.current?.value,\r\n                          email: emailRef.current?.value,\r\n                          number: contactnumber.toString(),\r\n                        };\r\n                        setInvitedUser([...invitedUser, user]);\r\n                        setError(null);\r\n                        setContactnumber(0);\r\n                        nameRef.current!.value = \"\";\r\n                        emailRef.current!.value = \"\";\r\n                        setIsSending(false);\r\n                        return setSus(\"User invited successfully\");\r\n                      }\r\n                    }\r\n                  }}\r\n                  className=\"text-white rounded-lg bg-secondary py-1 px-4 font-semibold text-lg\"\r\n                >\r\n                  Invite\r\n                </button>}\r\n            </div>\r\n            {error == \"\" || error == null || error == undefined ? null : (\r\n              <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">\r\n                {error}\r\n              </div>\r\n            )}\r\n            {sus == \"\" || sus == null || sus == undefined ? null : (\r\n              <div className=\"bg-green-500 bg-opacity-10 border-2 text-center border-green-500 rounded-md text-green-500 text-md font-normal text-md my-4\">\r\n                {sus}\r\n              </div>\r\n            )}\r\n            {invitedUser.map((val: InvitedUser, index: number) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className=\"my-4 bg-gray-200 shadow-md rounded-md py-1 px-4\"\r\n                >\r\n                  <p className=\"text-slate-900 text-md\">\r\n                    {index + 1}: {val.name} - {val.email}{\" \"}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n            <div\r\n              onClick={() => {\r\n                if (invitedUser.length == 0) {\r\n                  setSus(null);\r\n                  setError(\"Invite at least one user\");\r\n                } else {\r\n                  setIndex(6);\r\n                  nextButton.current!.click();\r\n                }\r\n              }}\r\n            >\r\n              <CusButton\r\n                text=\"Next\"\r\n                textColor={\"text-white\"}\r\n                width={\"w-full\"}\r\n                background={\"bg-primary\"}\r\n                fontwidth={\"font-bold\"}\r\n              ></CusButton>\r\n            </div>\r\n            <Form method=\"post\" className=\"hidden\">\r\n              <input type=\"hidden\" name=\"id\" value={userId.toString()} />\r\n              <button ref={nextButton} name=\"submit\">\r\n                Submit\r\n              </button>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ThirdPage;\r\n\r\nexport const action: ActionFunction = async ({ request }: ActionArgs) => {\r\n  const formData = await request.formData();\r\n  const value = Object.fromEntries(formData);\r\n\r\n  const userdata = await axios({\r\n    method: \"post\",\r\n    url: `${BaseUrl}/api/getuser`,\r\n    data: { id: value.id },\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Headers\": \"*\",\r\n      \"Access-Control-Allow-Options\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"*\",\r\n      \"X-Content-Type-Options\": \"*\",\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"*\",\r\n    },\r\n  });\r\n  if (userdata.data.status == false) {\r\n    return { message: userdata.data.message };\r\n  } else {\r\n    return redirect(\"/home\", {\r\n      headers: {\r\n        \"Set-Cookie\": await userPrefs.serialize({\r\n          user: userdata.data.data[0],\r\n          isLogin: true,\r\n        }),\r\n      },\r\n    });\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["import_react"]
}
