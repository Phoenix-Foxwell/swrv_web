{
  "version": 3,
  "sources": ["../../../../../app/routes/home/profilecomplete/index.tsx"],
  "sourcesContent": ["import {\r\n  ActionArgs,\r\n  ActionFunction,\r\n  LoaderArgs,\r\n  LoaderFunction,\r\n  json,\r\n  redirect,\r\n} from \"@remix-run/node\";\r\nimport { Form, useLoaderData, useNavigate } from \"@remix-run/react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport UserInputStore from \"~/state/user/firstinput\";\r\nimport { UploadFile } from \"~/utils\";\r\nimport axios from \"axios\";\r\n\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n  const cookieHeader = props.request.headers.get(\"Cookie\");\r\n  const cookie = await userPrefs.parse(cookieHeader);\r\n  return json({ user: cookie.user });\r\n};\r\n\r\nconst UserInputBoxOne = () => {\r\n  const user = useLoaderData();\r\n  const useremail: string = user.user.email;\r\n  const userID: String = user.user.id;\r\n  const setIndex = UserInputStore((state) => state.setIndex);\r\n  const navigator = useNavigate();\r\n\r\n  const [img, setImg] = useState<File | null>(null);\r\n  let imgref = useRef<HTMLInputElement | null>(null);\r\n  const [imgerror, setImgerror] = useState<string | null>(null);\r\n  const [error, setError] = useState<String | null>(null);\r\n\r\n  const emailRef = useRef<HTMLInputElement | null>(null);\r\n  const usernameRef = useRef<HTMLInputElement | null>(null);\r\n  const nicknameRef = useRef<HTMLInputElement | null>(null);\r\n  const datepicker = useRef<HTMLInputElement | null>(null);\r\n  const bioRef = useRef<HTMLTextAreaElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    emailRef!.current!.value = useremail;\r\n    usernameRef!.current!.value = useremail;\r\n  }, []);\r\n\r\n  const nextButton = useRef<HTMLButtonElement>(null);\r\n\r\n  const maxDate = new Date();\r\n  maxDate.setFullYear(maxDate.getFullYear() - 15);\r\n  const maxDateString = maxDate.toISOString().split(\"T\")[0];\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-8 w-full\">\r\n        <h1 className=\"text-2xl text-black font-bold\">\r\n          Tell us about yourself\r\n        </h1>\r\n        <div className=\"flex w-full md:flex-row flex-col\">\r\n          <div>\r\n            <div className=\"hidden\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                ref={imgref}\r\n                onChange={(value) => {\r\n                  let file_size = parseInt(\r\n                    (value!.target.files![0].size / 1024 / 1024).toString()\r\n                  );\r\n                  if (file_size < 4) {\r\n                    setImgerror(null);\r\n                    setImg(value!.target.files![0]);\r\n                  } else {\r\n                    setImgerror(\"Image file size must be less then 4 mb\");\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"bg-gray-200 rounded-lg my-6 mr-6 p-4 text-gray-400 flex md:flex-col flex-row w-full md:w-56\">\r\n              <div className=\"grow sm:w-full\">\r\n                {img == null ? (\r\n                  <img\r\n                    src=\"/images/icons/gallery.png\"\r\n                    alt=\"error\"\r\n                    className=\"w-40 sm:w-full object-cover inline-block\"\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    src={URL.createObjectURL(img)}\r\n                    alt=\"error\"\r\n                    className=\"w-40 sm:w-full inline-block object-cover rounded-md\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className=\"w-52 sm:w-full\">\r\n                <p className=\"mt-4\">Drop profile photo here.</p>\r\n                <p className=\"mt-4\">\r\n                  The image should either be jpg jped or png format and be a\r\n                  maximum size of 5 MB\r\n                </p>\r\n                {imgerror == \"\" ||\r\n                  imgerror == null ||\r\n                  imgerror == undefined ? null : (\r\n                  <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">\r\n                    {imgerror}\r\n                  </div>\r\n                )}\r\n                <div\r\n                  onClick={() => {\r\n                    imgref.current?.click();\r\n                  }}\r\n                >\r\n                  <CusButton\r\n                    text=\"Upload\"\r\n                    textColor={\"text-white\"}\r\n                    width={\"w-full\"}\r\n                    background={\"bg-primary\"}\r\n                  ></CusButton>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"w-full\">\r\n            <p className=\"text-black text-left font-normal text-lg mt-4\">\r\n              Email <span className=\"text-rose-500 text-2xl font-semibold\">&#42;</span>\r\n            </p>\r\n            <input\r\n              ref={emailRef}\r\n              disabled={true}\r\n              type={\"text\"}\r\n              className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n            />\r\n            <p className=\"text-black text-left font-normal text-lg  mt-4\">\r\n              Username <span className=\"text-rose-500 text-2xl font-semibold\">&#42;</span>\r\n            </p>\r\n            <input\r\n              ref={usernameRef}\r\n              type={\"text\"}\r\n              className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n            />\r\n            <p className=\"text-black text-left font-normal text-lg  mt-4\">\r\n              Nickname <span className=\"text-rose-500 text-2xl font-semibold\">&#42;</span>\r\n            </p>\r\n            <input\r\n              ref={nicknameRef}\r\n              type={\"text\"}\r\n              className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n            />\r\n            <p className=\"text-black text-left font-normal text-lg  mt-4\">\r\n              Date of birth <span className=\"text-rose-500 text-2xl font-semibold\">&#42;</span>\r\n            </p>\r\n            <input\r\n              type={\"date\"}\r\n              ref={datepicker}\r\n              className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\"\r\n              max={maxDateString}\r\n            />\r\n            <p className=\"text-black text-left font-normal text-lg  mt-4\">\r\n              Bio <span className=\"text-rose-500 text-2xl font-semibold\">&#42;</span>\r\n            </p>\r\n            <textarea\r\n              ref={bioRef}\r\n              className=\"p-4 w-full h-40 outline-none border-2 bg-[#EEEEEE] focus:border-gray-300 rounded-md resize-none\"\r\n            ></textarea>\r\n            {error == \"\" || error == null || error == undefined ? null : (\r\n              <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">\r\n                {error}\r\n              </div>\r\n            )}\r\n            <div\r\n              onClick={async () => {\r\n                if (img == null) {\r\n                  setError(\"Please select the image\");\r\n                } else if (\r\n                  emailRef.current?.value == null ||\r\n                  emailRef.current?.value == undefined ||\r\n                  emailRef.current?.value == \"\"\r\n                ) {\r\n                  setError(\"Enter the email\");\r\n                } else if (\r\n                  usernameRef.current?.value == null ||\r\n                  usernameRef.current?.value == undefined ||\r\n                  usernameRef.current?.value == \"\"\r\n                ) {\r\n                  setError(\"Enter the username\");\r\n                } else if (\r\n                  nicknameRef.current?.value == null ||\r\n                  nicknameRef.current?.value == undefined ||\r\n                  nicknameRef.current?.value == \"\"\r\n                ) {\r\n                  setError(\"Enter the nickname\");\r\n                } else if (\r\n                  datepicker.current?.value == null ||\r\n                  datepicker.current?.value == undefined ||\r\n                  datepicker.current?.value == \"\"\r\n                ) {\r\n                  setError(\"Enter the date of birth\");\r\n                } else if (\r\n                  bioRef.current?.value == null ||\r\n                  bioRef.current?.value == undefined ||\r\n                  bioRef.current?.value == \"\"\r\n                ) {\r\n                  setError(\"Enter the bio\");\r\n                } else {\r\n                  let avatar = await UploadFile(img);\r\n                  if (avatar.status) {\r\n                    let req = {\r\n                      id: userID,\r\n                      userName: usernameRef.current?.value,\r\n                      userKnownAs: nicknameRef.current?.value,\r\n                      userBioInfo: bioRef.current?.value,\r\n                      userDOB: datepicker.current?.value,\r\n                      userPicUrl: avatar.data,\r\n                    };\r\n                    const data = await axios({\r\n                      method: \"post\",\r\n                      url: `${BaseUrl}/api/updateuser`,\r\n                      data: req,\r\n                      headers: {\r\n                        \"Access-Control-Allow-Origin\": \"*\",\r\n                        \"Access-Control-Allow-Headers\": \"*\",\r\n                        \"Access-Control-Allow-Options\": \"*\",\r\n                        \"Access-Control-Allow-Methods\": \"*\",\r\n                        \"X-Content-Type-Options\": \"*\",\r\n                        \"Content-Type\": \"application/json\",\r\n                        Accept: \"*\",\r\n                      },\r\n                    });\r\n                    if (data.data.status == false) {\r\n                      return setError(data.data.message);\r\n                    }\r\n                    setIndex(2);\r\n                    nextButton.current!.click();\r\n                  } else {\r\n                    setError(avatar.data);\r\n                  }\r\n                }\r\n              }}\r\n            >\r\n              <CusButton\r\n                text=\"Next\"\r\n                textColor={\"text-white\"}\r\n                width={\"w-full\"}\r\n                background={\"bg-primary\"}\r\n                fontwidth={\"font-bold\"}\r\n              ></CusButton>\r\n            </div>\r\n            <Form method=\"post\" className=\"hidden\">\r\n              <input type=\"hidden\" name=\"id\" value={userID.toString()} />\r\n              <button ref={nextButton} name=\"submit\">\r\n                Submit\r\n              </button>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default UserInputBoxOne;\r\n\r\nexport const action: ActionFunction = async ({ request }: ActionArgs) => {\r\n  const formData = await request.formData();\r\n  const value = Object.fromEntries(formData);\r\n\r\n  const userdata = await axios({\r\n    method: \"post\",\r\n    url: `${BaseUrl}/api/getuser`,\r\n    data: { id: value.id },\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Headers\": \"*\",\r\n      \"Access-Control-Allow-Options\": \"*\",\r\n      \"Access-Control-Allow-Methods\": \"*\",\r\n      \"X-Content-Type-Options\": \"*\",\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"*\",\r\n    },\r\n  });\r\n  if (userdata.data.status == false) {\r\n    return { message: userdata.data.message };\r\n  } else {\r\n    return redirect(\"/home/profilecomplete/secondpage\", {\r\n      headers: {\r\n        \"Set-Cookie\": await userPrefs.serialize({\r\n          user: userdata.data.data[0],\r\n          isLogin: true,\r\n        }),\r\n      },\r\n    });\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["import_react"]
}
